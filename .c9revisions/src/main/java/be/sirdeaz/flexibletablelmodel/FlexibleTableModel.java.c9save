{"ts":1358984596123,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/*\r\n * To change this template, choose Tools | Templates\r\n * and open the template in the editor.\r\n */\r\npackage be.sirdeaz.flexibletablelmodel;\r\n\r\nimport java.lang.reflect.Field;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport javax.swing.table.AbstractTableModel;\r\n\r\n/**\r\n *\r\n * @author fdidd\r\n */\r\npublic class FlexibleTableModel<T> extends AbstractTableModel {\r\n\r\n    private final RefreshAction<T> refreshAction;\r\n    List<T> dataItems = new ArrayList<T>();\r\n    List<String> headers = new ArrayList<String>();\r\n    private final boolean asyncRefresh;\r\n\r\n    public FlexibleTableModel(RefreshAction<T> refreshAction, Class<T> c, boolean asyncRefresh) {\r\n        this.refreshAction = refreshAction;\r\n        this.asyncRefresh = asyncRefresh;\r\n\r\n        doRefresh();\r\n        setupModel(c);\r\n    }\r\n\r\n    private void doAsyncRefresh() {\r\n        // TODO implement async refreshing\r\n    }\r\n\r\n    /**\r\n     * Synchronously refreshes the model instance. Needs to be called on the EDT\r\n     */\r\n    public final void doRefresh() {\r\n        dataItems = refreshAction.refresh();\r\n        this.fireTableDataChanged();\r\n    }\r\n\r\n    @Override\r\n    public int getRowCount() {\r\n        return this.dataItems.size();\r\n    }\r\n\r\n    @Override\r\n    public int getColumnCount() {\r\n        return this.headers.size();\r\n    }\r\n\r\n    @Override\r\n    public String getColumnName(int column) {\r\n        return this.headers.get(column);\r\n    }\r\n\r\n    @Override\r\n    public Object getValueAt(int rowIndex, int columnIndex) {\r\n        try {\r\n            Field f  = dataItems.get(rowIndex).getClass().getDeclaredField(headers.get(columnIndex));\r\n            f.setAccessible(true);\r\n            return f.get(dataItems.get(rowIndex));\r\n        } catch (Exception e) {\r\n            throw new IllegalStateException(e);\r\n        }\r\n    }\r\n\r\n    private void setupModel(Class<T> c) {\r\n        if (!c.isAnnotationPresent(FlexibleTableObject.class)) {\r\n            throw new IllegalStateException(\"Provided class should be annotated with @FlexibleTableObject\");\r\n        }\r\n\r\n        this.headers.addAll(calculateColumns(c));\r\n    }\r\n\r\n    private List<String> calculateColumns(Class<T> c) {\r\n        List<String> headers = new ArrayList<String>();\r\n\r\n        for (Field f : c.getDeclaredFields()) {\r\n            if (f.isAnnotationPresent(FlexibleTableColumn.class)) {\r\n                FlexibleTableColumn tableColumn = f.getAnnotation(FlexibleTableColumn.class);\r\n                headers.add(tableColumn.name());\r\n            }\r\n        }\r\n\r\n        return headers;\r\n    }\r\n}\r\n"]],"start1":0,"start2":0,"length1":0,"length2":2560}]],"length":2560}
{"contributors":[],"silentsave":false,"ts":1358984625240,"patch":[[{"diffs":[[0,"ncRefresh;\r\n"],[-1,"\r\n"],[0,"        doRe"]],"start1":747,"start2":747,"length1":26,"length2":24}]],"length":2558,"saved":false}
{"ts":1358984677111,"patch":[[{"diffs":[[0,"\n/**\r\n *"],[1," Test on cloud-ide"],[0,"\r\n * @au"]],"start1":280,"start2":280,"length1":16,"length2":34}]],"length":2576,"saved":false}
